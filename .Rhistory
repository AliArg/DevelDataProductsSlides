set.seed(33833)
modRF <- train(y ~ ., data=vowel.train, method=rf, porx=TRUE)
modRF <- train(y ~ ., data=vowel.train, method="rf", prox=TRUE)
modRF <- train(y ~ ., data=vowel.train, method="rf")
predRF <- pred(modRF, vowel.test)
predRF <- predict(modRF, vowel.test)
confusionMatrix(predRF, vowel.test$type)
confusionMatrix(predRF, vowel.test$y)
confusionMatrix(predRF, vowel.test$y)
predRF <- predict(modRF, newdata=vowel.test)
predRF
str(vowel.train)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
modRF <- train(y ~ ., data=vowel.train, method="rf")
predRF <- predict(modRF, newdata=vowel.test)
confusionMatrix(predRF, vowel.test$y)
str(vowel.test)
modBoost <- train(y ~ ., data=vowel.train, method="gbm", verbose=FALSE)
predBoost <- predict(modBoost, vowel.test)
confusionMatrix(predBoost, vowel.test$y)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
mod2RF <- train(diagnosis ~ ., data=training, method="rf")
mod2Boost <- train(diagnosis ~ ., data=training, method="gbm")
mod2lda <- train(diagnosis ~ ., data=training, method="lda")
predRF <- predict(mod2RF, newdata=testing)
predBoost <- predict(mod2Boost, newdata=testing)
predLDA <- predict(mod2lda, newdata=testing)
predDF <- data.frame(predRF, predBoost, predLDA, diagnosis=testing$diagnosis)
combModel <- train(diagnosis ~ ., data=predDF, method="rf")
predRF <- predict(mod2RF, newdata=training)
predBoost <- predict(mod2Boost, newdata=training)
predLDA <- predict(mod2lda, newdata=training)
predDF <- data.frame(predRF, predBoost, predLDA, diagnosis=training$diagnosis)
combModel <- train(diagnosis ~ ., data=predDF, method="rf")
predRFtest <- predict(mod2RF, newdata=testing)
predBoosttest <- predict(mod2Boost, newdata=testing)
predLDAtest <- predict(mod2lda, newdata=testing)
predDFtest <- data.frame(predRFtest, predBoosttest, predLDAtest, diagnosis=testing$diagnosis)
combModelPredictTest <- predict(combModel,predDFtest)
predDFtest <- data.frame(predRFtest, predBoosttest, predLDAtest)
combModelPredictTest <- predict(combModel,predDFtest)
confusionMatrix(combModelPredictTest, testing$diagnosis)
accRF <- confusionMatrix(mod2RF,newdata=testing)
str(accRF)
accRF
confusionMatrix(mod2RF,newdata=testing)
confusionMatrix(combModelPredictTest, testing$diagnosis)
accBoost <- confusionMatrix(mod2Boost,newdata=testing)
accBoost
accRF <- confusionMatrix(mod2RF,testing$diagnosis)
accRF <- confusionMatrix(predRFtest,testing$diagnosis)
accRF
str(accRF)
accRF <- confusionMatrix(predRFtest,testing$diagnosis)$overall['Accuracy']
accRF
accBoost <- confusionMatrix(predBoosttest,testing$diagnosis)$overall['Accuracy']
accBoost
accLDA <- confusionMatrix(predLDAtest,testing$diagnosis)$overall['Accuracy']
accLDA
str(predDF)
str(training)
str(predDF)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# Set the seed to 62433 and predict diagnosis with all the other variables using
# a random forest ("rf"), boosted trees ("gbm") and linear discriminant analysis
# ("lda") model.
set.seed(62433)
mod2RF <- train(diagnosis ~ ., data=training, method="rf")
mod2Boost <- train(diagnosis ~ ., data=training, method="gbm")
mod2lda <- train(diagnosis ~ ., data=training, method="lda")
# Stack the predictions together using random forests ("rf")
predRF <- predict(mod2RF, newdata=training)
predBoost <- predict(mod2Boost, newdata=training)
predLDA <- predict(mod2lda, newdata=training)
predDF <- data.frame(predRF, predBoost, predLDA, diagnosis=training$diagnosis)
combModel <- train(diagnosis ~ ., data=predDF, method="rf")
#Predict on test set with combined model
predRFtest <- predict(mod2RF, newdata=testing)
predBoosttest <- predict(mod2Boost, newdata=testing)
predLDAtest <- predict(mod2lda, newdata=testing)
predDFtest <- data.frame(predRFtest, predBoosttest, predLDAtest)
combModelPredictTest <- predict(combModel,predDFtest)
confusionMatrix(combModelPredictTest, testing$diagnosis)
View(predDFtest)
combModel
str(predDFtest)
combModelPredictTest <- predict(combModel,predDFtest)
str(combModelPredictTest)
dim(combModelPredictTest)
confusionMatrix(combModelPredictTest, testing$diagnosis)
table(combModelPredictTest, testing$diagnosis)
str(testing$diagnosis)
combModelPredictTest
testing$diagnosis
str(predDFtest)
str(combModel)
predDFtest
combModel
combModelPredictTest <- predict(combModel,predDFtest)
combModelPredictTest
combModelPredictTest <- predict(combModel,newdata=predDFtest)
predDFtest <- data.frame(predRFtest, predBoosttest, predLDAtest,testing$diagnosis)
combModelPredictTest <- predict(combModel,newdata=predDFtest)
str(predDF)
predDFtest <- data.frame(predRFtest, predBoosttest, predLDAtest)
combModelPredictTest <- predict(combModel,newdata=predDFtest)
cmTrain <- confusionMatrix(training$diagnosis, predict(combModel, predDF))
cmTrain
predDFtest <- data.frame(predRFtest, predBoosttest, predLDAtest, testing$diagnosis)
str(predDFtest)
combModelPredictTest <- predict(combModel,newdata=predDFtest)
confusionMatrix(combModelPredictTest, predDFtest$diagnosis)
str(combModelPredictTest)
predDFtest$diagnosis
predDFtest <- data.frame(predRFtest, predBoosttest, predLDAtest)
combModelPredictTest <- predict(combModel,newdata=predDFtest)
str(combModelPredictTest)
str(testing$diagnosis)
confusionMatrix(combModelPredictTest, testing$diagnosis)
str(predDFtest)
str(combModelPredictTest)
dim(combModelPredictTest)
combModelPredictTest
str(predDFtest)
combModel <- train(diagnosis ~ ., data=predDF, method="rf")
cmTrain <- confusionMatrix(training$diagnosis, predict(combModel, predDF))
str(training$diagnosis)
str(predict(combModel, predDF))
predict(combModel, predDF)
predDFtest
predict(combModel,newdata=predDFtest)
predict(newdata=predDFtest,combModel)
combModel <- train(training$diagnosis ~ ., data=predDF, method="rf")
combModelPredictTest <- predict(combModel,newdata=predDFtest)
str(predDF)
combModel <- train(predDF$diagnosis ~ ., data=predDF, method="rf")
combModelPredictTest <- predict(combModel,newdata=predDFtest)
confusionMatrix(combModelPredictTest, testing$diagnosis)
confusionMatrix(combModelPredictTest, predDFtest$diagnosis)
str(combModelPredictTest)
str(predDFtest$diagnosis)
predDFtest$diagnosis
predDFtest$training$diagnosis
combModel <- train(diagnosis ~ ., data=predDF, method="rf")
combModelPredictTest <- predict(combModel,newdata=predDFtest)
str(predDF)
str(predDFtest)
predDFtest <- data.frame(predRF=predRFtest, predBoost=predBoosttest, predLDS=predLDAtest)
str(predDFtest)
combModelPredictTest <- predict(combModel,newdata=predDFtest)
predDFtest <- data.frame(predRF=predRFtest, predBoost=predBoosttest, predLDA=predLDAtest)
str(predDFtest)
combModelPredictTest <- predict(combModel,newdata=predDFtest)
confusionMatrix(combModelPredictTest, testing$diagnosis)
accRF <- confusionMatrix(predRFtest,testing$diagnosis)$overall['Accuracy']  #0.7926829
accRF
accBoost <- confusionMatrix(predBoosttest,testing$diagnosis)$overall['Accuracy']  #0.8170732
accBoost
accLDA <- confusionMatrix(predLDAtest,testing$diagnosis)$overall['Accuracy']  #0.7682927
accLDA
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
str(training)
modLasso <- lasso(CompressiveStrength ~ ., data=training)
modLasso <- train(CompressiveStrength ~ ., data=training, method="lasso")
modLasso
?plot.enet
plot(modLasso, xvar=penalty)
plot(modLasso, xvar="penalty")
plot(modLasso, xvar="step")
summary(modLasso)
?enet
str(diabetes)
data(diabetes)
str(diabetes)
modLasso <- train(CompressiveStrength ~ ., data=training, method="lasso". lambda=0)
modLasso <- train(CompressiveStrength ~ ., data=training, method="lasso", lambda=0)
modLasso <- train(CompressiveStrength ~ ., data=training, method="lasso")
object1 <- enet(training,CompressiveStrength,lambda=0)
View(diabetes)
dim(diabetes)
dim(training)
object1 <- enet(training,training$CompressiveStrength,lambda=0)
str(training)
m <- model.matrix(., data = training)
m <- data.matrix(training)
m
dim(m)
dim(training
)
object1 <- enet(m,CompressiveStrength,lambda=0)
str(m)
m <- data.matrix(training, rownames.force=TRUE)
str(m)
object1 <- enet(m,CompressiveStrength,lambda=0)
object1 <- enet(m,"CompressiveStrength"",lambda=0)
""
)
object1 <- enet(m,"CompressiveStrength",lambda=0)
str(training)
object1 <- enet(m,training$CompressiveStrength,lambda=0)
m <- data.matrix(training, rownames.force=TRUE)
object1 <- enet(m,training$CompressiveStrength,lambda=0)
plot(object1)
summary(object1)
object1
object2 <- enet(m,training$CompressiveStrength,lambda=1)
plot(object2)
plot(object1, xvar="penalty")
object1
object2
modLasso
summary(modLasso)
plot(modLasso)
plot(object1)
plot(object1, xvar="step")
object4 <- enet(m,training$CompressiveStrength,lambda=0.5,max.steps=50)
object4
object4 <- enet(m,training$CompressiveStrength,lambda=0,max.steps=50)
object4
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
dat = read.csv("C:/Users/Alicia/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.package("lubridate")
install.packages("lubridate")
library(lubridate)  # For year() function below
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstrain
bats(tstrain)
library(forecast)
install.packages("forecast")
library(forecast)
bats(tstrain)
model <- bats(tstrain)
tstest = ts(testing$visitsTumblr)
accuracy(model, tstest)
str(dat)
?forecast.bats
str(testing)
forecast(model,235, level=0.95)
str(dat)
str(training)
str(testing)
tstrain
?bats
fcResult <- forecast(model,235, level=0.95)
plot(fcResult)
plot(fcResult); lines(tstest,col="red")
plot(fcResult); lines(testing$visitsTumblr,col="red")
plot(fcResult); lines(testing$visitsTumblr,col="red")
head(testing)
str(fcResult)
fcResult <- forecast(model,600, level=0.95)
plot(fcResult); lines(testing$visitsTumblr,col="red")
str(testing)
fcResult <- forecast(model,235, level=0.95)
plot(fcResult); lines(testing$visitsTumblr,col="red")
?bats
model <- bats(tstrain)
fcResult <- forecast(model, level=0.95)
plot(fcResult); lines(testing$visitsTumblr,col="red")
plot(fcResult); lines(testing,col="red")
head(training)
head(tstrain)
tail(training)
head(testing)
tail(testing)
dat = read.csv("C:/Users/Alicia/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
model <- bats(tstrain)
fcResult <- forecast(model,235, level=0.95)
plot(fcResult); lines(testing$visitsTumblr,col="red")
training = dat[(year(dat$date) < 2012),]
testing = dat[(year(dat$date) > 2011),]
tstrain = ts(training$visitsTumblr)
model <- bats(tstrain)
fcResult <- forecast(model,235, level=0.95)
plot(fcResult); lines(testing$visitsTumblr,col="red")
training
tstrainSubconj <- ts(training$visitsTumblr[-1:250])
tstrainSubconj <- ts(training$visitsTumblr[-(1:250)])
tstrainSubconj
model2 <- bats(tstrainSubconj)
fcResult2 <- forecast(model2,235, level=0.95)
plot(fcResult2); lines(testing$visitsTumblr,col="red")
fcResult2
plot(fcResult); lines(testing$visitsTumblr,col="red")
fcResult
testing
datosParaComparar <- data.frame(fcResult, valorTest=testing$visitsTumblr)
datosParaComparar
datosParaComparar[(Lo.0.95<=valorTest) && (Hi.0.95<=valorTest) ,]
datosParaComparar <- data.frame(fcResult, testing$visitsTumblr)
names(datosParaComparar) <- c("prediccion", "lo", "hi", "valorTest")
datosParaComparar
datosParaComparar[(datosParaComparar$lo<=datosParaComparar$valorTest) && (datosParaComparar$hi<=datosParaComparar$valorTest) ,]
datosParaComparar[(datosParaComparar$lo>=datosParaComparar$valorTest) && (datosParaComparar$hi<=datosParaComparar$valorTest) ,]
datosParaComparar[which(datosParaComparar$lo>=datosParaComparar$valorTest &
datosParaComparar$hi<=datosParaComparar$valorTest) ,]
datosParaComparar[which(datosParaComparar$lo<=datosParaComparar$valorTest) ,]
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
str(testing)
str(testing[,-9])
svm.model <- svm(CompressiveStrength ~ ., data = training)
svm.pred <- predict(svm.model, testing[,-9])
error <- sqrt(sum((svm.pred-testing$CompressiveStrength)^2))
error
svm.pred
summary(svm.pred)
svm.pred <- predict(svm.model, testing)
error <- sqrt(sum((svm.pred-testing$CompressiveStrength)^2))
error
cbind(testing$CompressiveStrength, svm.pred)
plot(testing, pch=16)
abline(svm.model)
?plot
plot(testing$CompressiveStrength, pch=16)
rmse <- function(error)
{
sqrt(mean(error^2))
}
error2 <- svm.pred-testing$CompressiveStrength  # same as data$Y - predictedY
predictionRMSE <- rmse(error2)
predictionRMSE
error <- sqrt(mean((svm.pred-testing$CompressiveStrength)^2))
error
rmse2 <- rmse(svm.pred,testing$CompressiveStrength)
?rmse
set.seed(352)
svm.model <- svm(CompressiveStrength ~ ., data = training) #, cost = 100, gamma = 1)
svm.pred <- predict(svm.model, testing)
error <- sqrt(mean((svm.pred-testing$CompressiveStrength)^2))
error
dat = read.csv("C:/Users/Alicia/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
model <- bats(tstrain)
plot(forecast(model))
plot(forecast(model,100))
plot(forecast(model,235))
plot(forecast(model,235, level=0.95))
?forecast
forecast(model,235)
head(forecast(model,235))
forecast(model,235)
forecast(model,235, level=0.95)
forecast(model,10, level=0.95)
forecast(model,10)
fcResult <- forecast(model,235)
plot(fcResult); lines(testing$visitsTumblr,col="red")
fcResult[,c(1,2,5,6)]
names(fcResult)
fcResult
str(fcResult)
datosParaComparar <- data.frame(fcResult, testing$visitsTumblr)
datosParaComparar
names(datosParaComparar) <- c("prediccion", "lo80", "hi80", "lo95", "hi95","valorTest")
datosParaComparar
datosParaComparar[which(datosParaComparar$lo95>=datosParaComparar$valorTest &
datosParaComparar$hi95<=datosParaComparar$valorTest) ,]
datosParaComparar[which(datosParaComparar$lo95<=datosParaComparar$valorTest &
datosParaComparar$hi95>=datosParaComparar$valorTest) ,]
object1
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(352)
svm.model <- svm(CompressiveStrength ~ ., data = training) #, cost = 100, gamma = 1)
svm.pred <- predict(svm.model, testing)
error <- sqrt(mean((svm.pred-testing$CompressiveStrength)^2))
error
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(352)
svm.model <- svm(CompressiveStrength ~ ., data = training) #, cost = 100, gamma = 1)
svm.pred <- predict(svm.model, testing)
error <- sqrt(mean((svm.pred-testing$CompressiveStrength)^2))
error
rmse <- function(error) { sqrt(mean(error^2)) }
error2 <- svm.pred-testing$CompressiveStrength  # same as data$Y - predictedY
predictionRMSE <- rmse(error2)
predictionRMSE
et.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mod2RF <- train(diagnosis ~ ., data=training, method="rf")
mod2Boost <- train(diagnosis ~ ., data=training, method="gbm", verbose=FALSE)
mod2lda <- train(diagnosis ~ ., data=training, method="lda")
predRF <- predict(mod2RF, newdata=training)
predBoost <- predict(mod2Boost, newdata=training)
predLDA <- predict(mod2lda, newdata=training)
predDF <- data.frame(predRF, predBoost, predLDA, diagnosis=training$diagnosis)
combModel <- train(diagnosis ~ ., data=predDF, method="rf")
predRFtest    <- predict(mod2RF, newdata=testing)
predBoosttest <- predict(mod2Boost, newdata=testing)
predLDAtest   <- predict(mod2lda, newdata=testing)
predDFtest <- data.frame(predRF=predRFtest, predBoost=predBoosttest, predLDA=predLDAtest)
combModelPredictTest <- predict(combModel,newdata=predDFtest)
confusionMatrix(combModelPredictTest, testing$diagnosis)
accRF <- confusionMatrix(predRFtest,testing$diagnosis)$overall['Accuracy']  #0.8414634
accRF
accBoost <- confusionMatrix(predBoosttest,testing$diagnosis)$overall['Accuracy']  #0.8780488
accBoost
accLDA <- confusionMatrix(predLDAtest,testing$diagnosis)$overall['Accuracy']  #0.8414634
accLDA
?bast
?bats
dat = read.csv("C:/Users/Alicia/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
model <- bats(tstrain)
fcResult <- forecast(model,235)
str(model)
fcResult <- forecast(model,235)
str(fcResult)
fcResult
fcResult2 <- forecast(model,235, level=0.95)
str(fcResult2)
head(testing)
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modLasso <- train(CompressiveStrength ~ ., data=training, method="lasso")
m <- data.matrix(training, rownames.force=TRUE)
object1 <- enet(m,training$CompressiveStrength,lambda=0)
object1
library(caret)
library(AppliedPredictiveModeling)
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modLasso <- train(CompressiveStrength ~ ., data=training, method="lasso")
plot.enet(modLasso$finalModel, xvar = "penalty")
plot.enet(modLasso$finalModel, xvar = "penalty", use.color = TRUE)
modLasso <- train(CompressiveStrength ~ ., data=training, method="lasso")
plot.enet(modLasso$finalModel, xvar = "penalty", use.color = TRUE)
plot.enet(modLasso$finalModel, xvar = "penalty", use.color = TRUE)
plot.enet(modLasso$finalModel, xvar = "penalty")
R.Version()
R.Version()
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library (slidify)
setwd("~/Teaching3/Coursera/curso 9 Developing Data Products/project helps")
author ("slide_presentation")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browse("index.Rmd")
browseURL("index.Rmd")
browseURL("index.html")
help(iris)
publish(user="AliArg", repo="DevelDataProductsSlides")
